{"ast":null,"code":"const key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\nexport const uploadJSONToIPFS = async JSONBody => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  return axios.post(url, JSONBody, {\n    headers: {\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\nexport const uploadFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  let data = new FormData();\n  data.append(\"file\", file);\n  const metadata = JSON.stringify({\n    name: \"testname\",\n    keyvalues: {\n      exampleKey: \"exampleValue\"\n    }\n  });\n  data.append(\"pinataMetadata\", metadata);\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [{\n        id: \"FRA1\",\n        desiredReplicationCount: 1\n      }, {\n        id: \"NYC1\",\n        desiredReplicationCount: 2\n      }]\n    }\n  });\n  data.append(\"pinataOptions\", pinataOptions);\n  return axios.post(url, data, {\n    maxBodyLength: \"Infinity\",\n    headers: {\n      \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    console.log(\"image uploaded\", response.data.IpfsHash);\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};","map":{"version":3,"names":["key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"sources":["D:/nft-marketplace/src/pinata.js"],"sourcesContent":["const key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexport const uploadJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataURL:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n\nexport const uploadFileToIPFS = async (file) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n  let data = new FormData();\n  data.append(\"file\", file);\n\n  const metadata = JSON.stringify({\n    name: \"testname\",\n    keyvalues: {\n      exampleKey: \"exampleValue\",\n    },\n  });\n  data.append(\"pinataMetadata\", metadata);\n\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [\n        {\n          id: \"FRA1\",\n          desiredReplicationCount: 1,\n        },\n        {\n          id: \"NYC1\",\n          desiredReplicationCount: 2,\n        },\n      ],\n    },\n  });\n  data.append(\"pinataOptions\", pinataOptions);\n\n  return axios\n    .post(url, data, {\n      maxBodyLength: \"Infinity\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log(\"image uploaded\", response.data.IpfsHash);\n      return {\n        success: true,\n        pinataURL:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAC5C,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;AAElD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AAErC,OAAO,MAAME,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,MAAMC,GAAG,GAAI,gDAA+C;EAC5D,OAAOL,KAAK,CACTM,IAAI,CAACD,GAAG,EAAED,QAAQ,EAAE;IACnBG,OAAO,EAAE;MACPC,cAAc,EAAEd,GAAG;MACnBe,qBAAqB,EAAEX;IACzB;EACF,CAAC,CAAC,CACDY,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxB,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,SAAS,EACP,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACzD,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO;MACLL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC;EACH,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,MAAMjB,GAAG,GAAI,gDAA+C;EAE5D,IAAIS,IAAI,GAAG,IAAIZ,QAAQ,EAAE;EACzBY,IAAI,CAACS,MAAM,CAAC,MAAM,EAAED,IAAI,CAAC;EAEzB,MAAME,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC9BC,IAAI,EAAE,UAAU;IAChBC,SAAS,EAAE;MACTC,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACFf,IAAI,CAACS,MAAM,CAAC,gBAAgB,EAAEC,QAAQ,CAAC;EAEvC,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAS,CAAC;IACnCK,UAAU,EAAE,CAAC;IACbC,eAAe,EAAE;MACfC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,MAAM;QACVC,uBAAuB,EAAE;MAC3B,CAAC,EACD;QACED,EAAE,EAAE,MAAM;QACVC,uBAAuB,EAAE;MAC3B,CAAC;IAEL;EACF,CAAC,CAAC;EACFrB,IAAI,CAACS,MAAM,CAAC,eAAe,EAAEO,aAAa,CAAC;EAE3C,OAAO9B,KAAK,CACTM,IAAI,CAACD,GAAG,EAAES,IAAI,EAAE;IACfsB,aAAa,EAAE,UAAU;IACzB7B,OAAO,EAAE;MACP,cAAc,EAAG,iCAAgCO,IAAI,CAACuB,SAAU,EAAC;MACjE7B,cAAc,EAAEd,GAAG;MACnBe,qBAAqB,EAAEX;IACzB;EACF,CAAC,CAAC,CACDY,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxBO,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAAC;IACrD,OAAO;MACLH,OAAO,EAAE,IAAI;MACbC,SAAS,EACP,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACzD,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO;MACLL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC;EACH,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}